{"ast":null,"code":"import axios from \"axios\";\nimport { returnErrors } from \"./errorActions\";\nimport { USER_LOADED, USER_LOADING, AUTH_ERROR, LOGIN_SUCCESS, LOGIN_FAIL, LOGOUT_SUCCESS, REGISTER_SUCCESS, REGISTER_FAIL } from \"./types\";\nexport const loadUser = () => (dispatch, getState) => {\n  dispatch({\n    type: USER_LOADING\n  });\n  axios.get(\"http://localhost:5000/users/user\", tokenConfig(getState)).then(res => dispatch({\n    type: USER_LOADED,\n    payload: res.data\n  })).catch(err => {\n    dispatch(returnErrors(err.response.data, err.response.status));\n    dispatch({\n      type: AUTH_ERROR\n    });\n  });\n};\nexport const register = ({\n  username,\n  email,\n  password\n}) => dispatch => {\n  const config = {\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  };\n  const body = JSON.stringify({\n    username,\n    email,\n    password\n  });\n  axios.post(\"http://localhost:5000/users/add\", body, config).then(res => dispatch({\n    type: REGISTER_SUCCESS,\n    payload: res.data\n  }), alert(username + \" you have been successfully logged in\")).catch(err => {\n    dispatch(returnErrors(err.response.data, err.response.status, \"REGISTER_FAIL\"));\n    dispatch({\n      type: REGISTER_FAIL\n    });\n  });\n};\nexport const login = ({\n  username,\n  password\n}) => dispatch => {\n  const config = {\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  };\n  const body = JSON.stringify({\n    username,\n    password\n  });\n  axios.post(\"http://localhost:5000/users/login\", body, config).then(res => dispatch({\n    type: LOGIN_SUCCESS,\n    payload: res.data\n  }), alert(username + \" you have been successfully logged in\")).catch(err => {\n    dispatch(returnErrors(err.response.data, err.response.status, \"LOGIN_FAIL\"));\n    dispatch({\n      type: LOGIN_FAIL\n    });\n  });\n};\nexport const logout = () => {\n  return {\n    type: LOGOUT_SUCCESS\n  };\n};\nexport const tokenConfig = getState => {\n  const token = getState().auth.token;\n  const config = {\n    headers: {\n      \"Content-type\": \"appplication/json\"\n    }\n  };\n\n  if (token) {\n    config.headers[\"x-auth-token\"] = token;\n  }\n\n  return config;\n};","map":{"version":3,"sources":["C:/Users/Tonio/Desktop/stress/New folder/project/src/actions/authActions.js"],"names":["axios","returnErrors","USER_LOADED","USER_LOADING","AUTH_ERROR","LOGIN_SUCCESS","LOGIN_FAIL","LOGOUT_SUCCESS","REGISTER_SUCCESS","REGISTER_FAIL","loadUser","dispatch","getState","type","get","tokenConfig","then","res","payload","data","catch","err","response","status","register","username","email","password","config","headers","body","JSON","stringify","post","alert","login","logout","token","auth"],"mappings":"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","sourcesContent":["import axios from \"axios\";\r\nimport { returnErrors } from \"./errorActions\";\r\nimport {\r\n  USER_LOADED,\r\n  USER_LOADING,\r\n  AUTH_ERROR,\r\n  LOGIN_SUCCESS,\r\n  LOGIN_FAIL,\r\n  LOGOUT_SUCCESS,\r\n  REGISTER_SUCCESS,\r\n  REGISTER_FAIL\r\n} from \"./types\";\r\n\r\nexport const loadUser = () => (dispatch, getState) => {\r\n  dispatch({ type: USER_LOADING });\r\n\r\n  axios\r\n    .get(\"http://localhost:5000/users/user\", tokenConfig(getState))\r\n    .then(res =>\r\n      dispatch({\r\n        type: USER_LOADED,\r\n        payload: res.data\r\n      })\r\n    )\r\n    .catch(err => {\r\n      dispatch(returnErrors(err.response.data, err.response.status));\r\n      dispatch({\r\n        type: AUTH_ERROR\r\n      });\r\n    });\r\n};\r\n\r\nexport const register = ({ username, email, password }) => dispatch => {\r\n  const config = {\r\n    headers: {\r\n      \"Content-Type\": \"application/json\"\r\n    }\r\n  };\r\n\r\n  const body = JSON.stringify({ username, email, password });\r\n\r\n  axios\r\n    .post(\"http://localhost:5000/users/add\", body, config)\r\n    .then(res =>\r\n      dispatch({\r\n        type: REGISTER_SUCCESS,\r\n        payload: res.data\r\n      }),\r\n      alert(username + \" you have been successfully logged in\")\r\n    )\r\n    .catch(err => {\r\n      dispatch(\r\n        returnErrors(err.response.data, err.response.status, \"REGISTER_FAIL\")\r\n      );\r\n      dispatch({\r\n        type: REGISTER_FAIL\r\n      });\r\n    });\r\n};\r\n\r\nexport const login = ({ username, password }) => dispatch => {\r\n  const config = {\r\n    headers: {\r\n      \"Content-Type\": \"application/json\"\r\n    }\r\n  };\r\n\r\n  const body = JSON.stringify({ username, password });\r\n\r\n  axios\r\n    .post(\"http://localhost:5000/users/login\", body, config)\r\n    .then(res =>\r\n      dispatch({\r\n        type: LOGIN_SUCCESS,\r\n        payload: res.data\r\n      }),\r\n      alert(username + \" you have been successfully logged in\")\r\n    )\r\n    .catch(err => {\r\n      dispatch(\r\n        returnErrors(err.response.data, err.response.status, \"LOGIN_FAIL\")\r\n      );\r\n      dispatch({\r\n        type: LOGIN_FAIL\r\n      });\r\n    });\r\n};\r\n\r\nexport const logout = () => {\r\n  return {\r\n    type: LOGOUT_SUCCESS\r\n  };\r\n};\r\n\r\nexport const tokenConfig = getState => {\r\n  const token = getState().auth.token;\r\n\r\n  const config = {\r\n    headers: {\r\n      \"Content-type\": \"appplication/json\"\r\n    }\r\n  };\r\n\r\n  if (token) {\r\n    config.headers[\"x-auth-token\"] = token;\r\n  }\r\n\r\n  return config;\r\n};\r\n"]},"metadata":{},"sourceType":"module"}