{"ast":null,"code":"import axios from 'axios';\nimport { returnErrors } from './errorActions';\nimport { USER_LOADED, USER_LOADING, AUTH_ERROR, LOGIN_SUCCESS, LOGIN_FAIL, LOUGOUT_SUCCESS, REGISTER_SUCCESS, REGISTER_FAIL } from \"./types\";\nexport const loadUser = () => (dispatch, getState) => {\n  dispatch({\n    type: USER_LOADING\n  });\n  axios.get('http://localhost:5000/users/user', tokenConfig(getState)).then(res => dispatch({\n    type: USER_LOADED,\n    payload: res.data\n  })).catch(err => {\n    dispatch(returnErrors(err.response.data, err.response.status));\n    dispatch({\n      type: AUTH_ERROR\n    });\n  });\n};\nexport const register = ({\n  username,\n  email,\n  password\n}) => dispatch => {\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n  const body = JSON.stringify({\n    username,\n    email,\n    password\n  });\n};\nexport const tokenConfig = getState => {\n  const token = getState().auth.token;\n  const config = {\n    headers: {\n      \"content=type\": \"appplication/json\"\n    }\n  };\n\n  if (token) {\n    config.headers['x-auth-token'] = token;\n  }\n\n  return config;\n};","map":{"version":3,"sources":["C:/Users/Tonio/Desktop/stress/New folder/project/src/actions/authActions.js"],"names":["axios","returnErrors","USER_LOADED","USER_LOADING","AUTH_ERROR","LOGIN_SUCCESS","LOGIN_FAIL","LOUGOUT_SUCCESS","REGISTER_SUCCESS","REGISTER_FAIL","loadUser","dispatch","getState","type","get","tokenConfig","then","res","payload","data","catch","err","response","status","register","username","email","password","config","headers","body","JSON","stringify","token","auth"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,YAAT,QAA4B,gBAA5B;AACA,SACIC,WADJ,EAEIC,YAFJ,EAGIC,UAHJ,EAIIC,aAJJ,EAKIC,UALJ,EAMIC,eANJ,EAOIC,gBAPJ,EAQIC,aARJ,QASM,SATN;AAWA,OAAO,MAAMC,QAAQ,GAAG,MAAM,CAACC,QAAD,EAAWC,QAAX,KAAwB;AAClDD,EAAAA,QAAQ,CAAC;AAAEE,IAAAA,IAAI,EAAEV;AAAR,GAAD,CAAR;AAGAH,EAAAA,KAAK,CAACc,GAAN,CAAU,kCAAV,EAA8CC,WAAW,CAACH,QAAD,CAAzD,EACCI,IADD,CACMC,GAAG,IAAIN,QAAQ,CAAC;AAClBE,IAAAA,IAAI,EAAEX,WADY;AAElBgB,IAAAA,OAAO,EAAED,GAAG,CAACE;AAFK,GAAD,CADrB,EAKCC,KALD,CAKOC,GAAG,IAAI;AACVV,IAAAA,QAAQ,CAACV,YAAY,CAACoB,GAAG,CAACC,QAAJ,CAAaH,IAAd,EAAoBE,GAAG,CAACC,QAAJ,CAAaC,MAAjC,CAAb,CAAR;AACAZ,IAAAA,QAAQ,CAAC;AACLE,MAAAA,IAAI,EAACT;AADA,KAAD,CAAR;AAIH,GAXD;AAYH,CAhBM;AAkBP,OAAO,MAAMoB,QAAQ,GAAG,CAAC;AAACC,EAAAA,QAAD;AAAWC,EAAAA,KAAX;AAAkBC,EAAAA;AAAlB,CAAD,KAAiChB,QAAQ,IAAI;AAEjE,QAAMiB,MAAM,GAAC;AACTC,IAAAA,OAAO,EAAC;AACJ,sBAAgB;AADZ;AADC,GAAb;AAMA,QAAMC,IAAI,GAAGC,IAAI,CAACC,SAAL,CAAe;AAACP,IAAAA,QAAD;AAAWC,IAAAA,KAAX;AAAkBC,IAAAA;AAAlB,GAAf,CAAb;AACH,CATM;AAUP,OAAO,MAAMZ,WAAW,GAAGH,QAAQ,IAAI;AACnC,QAAMqB,KAAK,GAAGrB,QAAQ,GAAGsB,IAAX,CAAgBD,KAA9B;AAEA,QAAML,MAAM,GAAG;AACXC,IAAAA,OAAO,EAAC;AACJ,sBAAe;AADX;AADG,GAAf;;AAMA,MAAII,KAAJ,EAAU;AACNL,IAAAA,MAAM,CAACC,OAAP,CAAe,cAAf,IAAiCI,KAAjC;AACH;;AACD,SAAOL,MAAP;AACH,CAbM","sourcesContent":["import axios from 'axios';\r\nimport { returnErrors} from './errorActions';\r\nimport{ \r\n    USER_LOADED,\r\n    USER_LOADING,\r\n    AUTH_ERROR,\r\n    LOGIN_SUCCESS,\r\n    LOGIN_FAIL,\r\n    LOUGOUT_SUCCESS,\r\n    REGISTER_SUCCESS,\r\n    REGISTER_FAIL\r\n} from\"./types\";\r\n\r\nexport const loadUser = () => (dispatch, getState) => {\r\n    dispatch({ type: USER_LOADING});\r\n\r\n    \r\n    axios.get('http://localhost:5000/users/user', tokenConfig(getState))\r\n    .then(res => dispatch({\r\n        type: USER_LOADED,\r\n        payload: res.data\r\n    }))\r\n    .catch(err => {\r\n        dispatch(returnErrors(err.response.data, err.response.status))\r\n        dispatch({\r\n            type:AUTH_ERROR\r\n        });\r\n\r\n    });\r\n};\r\n\r\nexport const register = ({username, email, password}) => dispatch => {\r\n\r\n    const config={\r\n        headers:{\r\n            'Content-Type': 'application/json'\r\n        }\r\n    }\r\n\r\n    const body = JSON.stringify({username, email, password});\r\n}\r\nexport const tokenConfig = getState => {\r\n    const token = getState().auth.token;\r\n\r\n    const config = {\r\n        headers:{\r\n            \"content=type\":\"appplication/json\"\r\n        }\r\n    }\r\n\r\n    if (token){\r\n        config.headers['x-auth-token'] = token;\r\n    }\r\n    return config \r\n}"]},"metadata":{},"sourceType":"module"}